[gd_scene load_steps=9 format=1]

[ext_resource path="res://Scenes/backButton.tscn" type="PackedScene" id=1]
[ext_resource path="res://Fonts/avenir-next-regular.ttf" type="DynamicFontData" id=2]

[sub_resource type="GDScript" id=6]

script/source = "extends Node

# class member variables go here, for example:
# var a = 2
# var b = \"textvar\"

var t = Thread.new()

func _ready():
	# Called every time the node is added to the scene.
	# Initialization here
	var backButton = get_node(\"User/backButton\")
	backButton.connect(\"pressed\", self, \"_backPressed\")
	backButton.autoReturn = false
	pass

func _backPressed():
	if (t.is_active()):
		return
	t.start(self, \"_load\", get_node(\"User/usernameEdit\").get_text())

func _load(usernameText):
	print(\"loading...\")
	var err=0
	var http = HTTPClient.new() # Create the Client
	
	var err = http.connect(\"pathserver.herokuapp.com\",80, false) # Connect to host/port
	assert(err==OK) # Make sure connection was OK

	# Wait until resolved and connected
	while( http.get_status()==HTTPClient.STATUS_CONNECTING or http.get_status()==HTTPClient.STATUS_RESOLVING):
		http.poll()
		print(\"Connecting..\")
		OS.delay_msec(500)

	assert( http.get_status() == HTTPClient.STATUS_CONNECTED ) # Could not connect

	# Some headers

	var headers=[
		\"Accept: */*\",
		\"Content-Type: application/json\"
	]

	err = http.request(HTTPClient.METHOD_POST,
		\"/user/submit\",
		headers,
		'{\"username\": \"' + usernameText + '\"}') # Request a page from the site (this one was chunked..)

	assert( err == OK ) # Make sure all is OK

	while (http.get_status() == HTTPClient.STATUS_REQUESTING):
		# Keep polling until the request is going on
		http.poll()
		print(\"Requesting..\")
		OS.delay_msec(500)


	assert( http.get_status() == HTTPClient.STATUS_BODY or http.get_status() == HTTPClient.STATUS_CONNECTED ) # Make sure request finished well.

	print(\"response? \",http.has_response()) # Site might not have a response.


	if (http.has_response()):
		# If there is a response..

		var headers = http.get_response_headers_as_dictionary() # Get response headers
		print(\"code: \",http.get_response_code()) # Show response code
		print(\"**headers:\\\\n\",headers) # Show headers

		# Getting the HTTP Body

		if (http.is_response_chunked()):
			# Does it use chunks?
			print(\"Response is Chunked!\")
		else:
			# Or just plain Content-Length
			var bl = http.get_response_body_length()
			print(\"Response Length: \",bl)

		# This method works for both anyway

		var rb = RawArray() # Array that will hold the data

		while(http.get_status()==HTTPClient.STATUS_BODY):
			# While there is body left to be read
			http.poll()
			var chunk = http.read_response_body_chunk() # Get a chunk
			if (chunk.size()==0):
			    # Got nothing, wait for buffers to fill a bit
			    OS.delay_usec(1000)
			else:
			    rb = rb + chunk # Append to read buffer


		# Done!

		print(\"bytes got: \",rb.size())
		var text = rb.get_string_from_ascii()
		print(\"Text: \",text)
	get_tree().change_scene(\"res://Scenes/Menu.tscn\")"

[sub_resource type="StyleBoxFlat" id=1]

content_margin/left = -1.0
content_margin/right = -1.0
content_margin/top = -1.0
content_margin/bottom = -1.0
bg_color = Color( 0.847059, 0.929412, 0.94902, 1 )
light_color = Color( 0.8, 0.8, 0.8, 1 )
dark_color = Color( 0.8, 0.8, 0.8, 1 )
border_size = 0
border_blend = true
draw_bg = true

[sub_resource type="DynamicFont" id=2]

font/size = 50
font/use_mipmaps = false
font/use_filter = false
font/font = ExtResource( 2 )

[sub_resource type="DynamicFont" id=5]

font/size = 30
font/use_mipmaps = false
font/use_filter = false
font/font = ExtResource( 2 )

[sub_resource type="StyleBoxFlat" id=3]

content_margin/left = -1.0
content_margin/right = -1.0
content_margin/top = -1.0
content_margin/bottom = -1.0
bg_color = Color( 0.6, 0.6, 0.6, 1 )
light_color = Color( 0.8, 0.8, 0.8, 1 )
dark_color = Color( 0.8, 0.8, 0.8, 1 )
border_size = 0
border_blend = true
draw_bg = true

[sub_resource type="DynamicFont" id=4]

font/size = 30
font/use_mipmaps = false
font/use_filter = false
font/font = ExtResource( 2 )

[node name="Network Control" type="Node"]

script/script = SubResource( 6 )

[node name="User" type="Panel" parent="."]

focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = -7.0
margin/top = -8.0
margin/right = 762.0
margin/bottom = 1375.0
custom_styles/panel = SubResource( 1 )

[node name="backButton" parent="User" instance=ExtResource( 1 )]

margin/left = 62.0
margin/top = 151.0
margin/right = 125.0
margin/bottom = 245.0

[node name="Label" type="Label" parent="User"]

focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = 194.0
margin/top = 134.0
margin/right = 564.0
margin/bottom = 193.0
custom_fonts/font = SubResource( 2 )
custom_colors/font_color = Color( 0, 0, 0, 1 )
text = "Your Username:"
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1

[node name="DescriptionLabel" type="Label" parent="User"]

focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = 95.0
margin/top = 307.0
margin/right = 688.0
margin/bottom = 428.0
custom_fonts/font = SubResource( 5 )
custom_colors/font_color = Color( 0, 0, 0, 1 )
text = "Share the username 'john' with your friends
so they can send you messages"
align = 1
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1

[node name="usernameEdit" type="LineEdit" parent="User"]

focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 246.0
margin/top = 226.0
margin/right = 511.0
margin/bottom = 271.0
custom_styles/normal = SubResource( 3 )
custom_fonts/font = SubResource( 4 )
custom_colors/font_color = Color( 0, 0, 0, 1 )
text = "john"
placeholder/alpha = 0.6
align = 1
max_length = 18
focus_mode = 2
caret/caret_blink = false
caret/caret_blink_speed = 0.65


