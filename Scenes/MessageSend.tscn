[gd_scene load_steps=17 format=1]

[ext_resource path="res://Fonts/avenir-next-regular.ttf" type="DynamicFontData" id=1]
[ext_resource path="res://Textures/messageBubble.tex" type="Texture" id=2]
[ext_resource path="res://Textures/sendButton.tex" type="Texture" id=3]
[ext_resource path="res://Textures/sendButtonSelected.tex" type="Texture" id=4]
[ext_resource path="res://Textures/disclosureIndicator.png" type="Texture" id=5]
[ext_resource path="res://Textures/disclosureIndicatorSelected.png" type="Texture" id=6]

[sub_resource type="StyleBoxFlat" id=1]

content_margin/left = -1.0
content_margin/right = -1.0
content_margin/top = -1.0
content_margin/bottom = -1.0
bg_color = Color( 0.847059, 0.929412, 0.952941, 1 )
light_color = Color( 0.8, 0.8, 0.8, 1 )
dark_color = Color( 0.8, 0.8, 0.8, 1 )
border_size = 0
border_blend = true
draw_bg = true

[sub_resource type="GDScript" id=10]

script/source = "extends Panel

# class member variables go here, for example:
# var a = 2
# var b = \"textvar\"

var t = Thread.new()

func _ready():
	# Called every time the node is added to the scene.
	# Initialization here
	var button = get_node('SendButton')
	button.connect(\"pressed\", self, \"_send\")
	pass

func _send():
	if(t.is_active()):
		return
	t.start(self,\"_load\")

func _load():
	var err=0
	var http = HTTPClient.new() # Create the Client
	
	var err = http.connect(\"pathserver.herokuapp.com\",80, false) # Connect to host/port
	assert(err==OK) # Make sure connection was OK

	# Wait until resolved and connected
	while( http.get_status()==HTTPClient.STATUS_CONNECTING or http.get_status()==HTTPClient.STATUS_RESOLVING):
		http.poll()
		print(\"Connecting..\")
		OS.delay_msec(500)

	assert( http.get_status() == HTTPClient.STATUS_CONNECTED ) # Could not connect

	# Some headers

	var headers=[
		\"User-Agent: Pirulo/1.0 (Godot)\",
		\"Accept: */*\"
	]

	err = http.request(HTTPClient.METHOD_POST,\"/quote/send\",headers,'{\"quote\": \"Be free!\", \"toUser\": \"john\"}') # Request a page from the site (this one was chunked..)

	assert( err == OK ) # Make sure all is OK

	while (http.get_status() == HTTPClient.STATUS_REQUESTING):
		# Keep polling until the request is going on
		http.poll()
		print(\"Requesting..\")
		OS.delay_msec(500)


	assert( http.get_status() == HTTPClient.STATUS_BODY or http.get_status() == HTTPClient.STATUS_CONNECTED ) # Make sure request finished well.

	print(\"response? \",http.has_response()) # Site might not have a response.


	if (http.has_response()):
		# If there is a response..

		var headers = http.get_response_headers_as_dictionary() # Get response headers
		print(\"code: \",http.get_response_code()) # Show response code
		print(\"**headers:\\\\n\",headers) # Show headers

		# Getting the HTTP Body

		if (http.is_response_chunked()):
			# Does it use chunks?
			print(\"Response is Chunked!\")
		else:
			# Or just plain Content-Length
			var bl = http.get_response_body_length()
			print(\"Response Length: \",bl)

		# This method works for both anyway

		var rb = RawArray() # Array that will hold the data

		while(http.get_status()==HTTPClient.STATUS_BODY):
			# While there is body left to be read
			http.poll()
			var chunk = http.read_response_body_chunk() # Get a chunk
			if (chunk.size()==0):
			    # Got nothing, wait for buffers to fill a bit
			    OS.delay_usec(1000)
			else:
			    rb = rb + chunk # Append to read buffer


		# Done!

		print(\"bytes got: \",rb.size())
		var text = rb.get_string_from_ascii()
		print(\"Text: \",text)"

[sub_resource type="StyleBoxFlat" id=2]

content_margin/left = -1.0
content_margin/right = -1.0
content_margin/top = -1.0
content_margin/bottom = -1.0
bg_color = Color( 1, 1, 1, 0.429529 )
light_color = Color( 0.847059, 0.929412, 0.94902, 1 )
dark_color = Color( 0.578125, 0.578125, 0.578125, 1 )
border_size = 1
border_blend = true
draw_bg = true

[sub_resource type="DynamicFont" id=3]

font/size = 23
font/use_mipmaps = false
font/use_filter = false
font/font = ExtResource( 1 )

[sub_resource type="StyleBoxEmpty" id=4]

content_margin/left = -1.0
content_margin/right = -1.0
content_margin/top = -1.0
content_margin/bottom = -1.0

[sub_resource type="StyleBoxTexture" id=5]

content_margin/left = -1.0
content_margin/right = -1.0
content_margin/top = -1.0
content_margin/bottom = -1.0
texture = ExtResource( 2 )
margin/left = 20.0
margin/right = 20.0
margin/top = 20.0
margin/bottom = 20.0
expand_margin/left = 0.0
expand_margin/right = 0.0
expand_margin/top = 0.0
expand_margin/bottom = 0.0
draw_center = true

[sub_resource type="DynamicFont" id=6]

font/size = 30
font/use_mipmaps = false
font/use_filter = false
font/font = ExtResource( 1 )

[sub_resource type="GDScript" id=9]

script/source = "extends TextureButton

# class member variables go here, for example:
# var a = 2
# var b = \"textvar\"

func _init():
	add_user_signal(\"pressed\")
	pass
	

func _ready():
	# Called every time the node is added to the scene.
	# Initialization here
	set_pressed(true)
	pass

func _pressed():
	emit_signal(\"pressed\")"

[sub_resource type="DynamicFont" id=7]

font/size = 30
font/use_mipmaps = false
font/use_filter = false
font/font = ExtResource( 1 )

[sub_resource type="GDScript" id=8]

script/source = "extends TextureButton

# class member variables go here, for example:
# var a = 2
# var b = \"textvar\"

func _ready():
	# Called every time the node is added to the scene.
	# Initialization here
	set_pressed(true)
	pass

func _pressed():
	get_tree().change_scene(\"res://Scenes/Menu.tscn\")"

[node name="MessageSend" type="Panel"]

focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = -2.0
margin/top = 0.0
margin/right = 760.0
margin/bottom = 1144.0
custom_styles/panel = SubResource( 1 )
script/script = SubResource( 10 )

[node name="toEdit" type="LineEdit" parent="."]

focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 225.0
margin/top = 152.0
margin/right = 568.0
margin/bottom = 191.0
custom_styles/normal = SubResource( 2 )
custom_fonts/font = SubResource( 3 )
custom_colors/font_color = Color( 0.149536, 0.447954, 0.765625, 1 )
text = "john"
placeholder/alpha = 0.6
align = 1
focus_mode = 2
caret/caret_blink = false
caret/caret_blink_speed = 0.65

[node name="messageEdit" type="TextEdit" parent="."]

focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 167.0
margin/top = 248.0
margin/right = 589.0
margin/bottom = 496.0
custom_styles/focus = SubResource( 4 )
custom_styles/normal = SubResource( 5 )
custom_fonts/font = SubResource( 6 )
custom_colors/font_color = Color( 0.384521, 0.600815, 0.878906, 1 )
custom_colors/current_line_color = Color( 0, 0, 0, 0 )
syntax_highlighting = false
show_line_numbers = false
highlight_all_occurrences = false
caret/block_caret = true
caret/caret_blink = true
caret/caret_blink_speed = 0.65

[node name="SendButton" type="TextureButton" parent="."]

focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 294.0
margin/top = 554.0
margin/right = 492.0
margin/bottom = 600.0
toggle_mode = false
enabled_focus_mode = 2
shortcut = null
textures/normal = ExtResource( 3 )
textures/pressed = ExtResource( 4 )
params/resize_mode = 0
params/stretch_mode = 0
script/script = SubResource( 9 )

[node name="toLabel" type="Label" parent="."]

focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = 175.0
margin/top = 152.0
margin/right = 219.0
margin/bottom = 187.0
custom_fonts/font = SubResource( 7 )
custom_colors/font_color = Color( 0, 0, 0, 1 )
text = "To:"
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1

[node name="backButton" type="TextureButton" parent="."]

visibility/opacity = 0.3
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 56.0
margin/top = 126.0
margin/right = 119.0
margin/bottom = 220.0
toggle_mode = false
enabled_focus_mode = 2
shortcut = null
textures/normal = ExtResource( 5 )
textures/pressed = ExtResource( 6 )
params/resize_mode = 0
params/scale = Vector2( 0.5, 0.5 )
params/stretch_mode = 0
script/script = SubResource( 8 )


